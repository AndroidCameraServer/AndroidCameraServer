// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `MotorState.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RoboCompJointMotor;

public class MotorState implements java.lang.Cloneable, java.io.Serializable
{
    public float pos;

    public float vel;

    public float power;

    public String timeStamp;

    public int p;

    public int v;

    public boolean isMoving;

    public MotorState()
    {
    }

    public MotorState(float pos, float vel, float power, String timeStamp, int p, int v, boolean isMoving)
    {
        this.pos = pos;
        this.vel = vel;
        this.power = power;
        this.timeStamp = timeStamp;
        this.p = p;
        this.v = v;
        this.isMoving = isMoving;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        MotorState _r = null;
        try
        {
            _r = (MotorState)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(pos != _r.pos)
            {
                return false;
            }
            if(vel != _r.vel)
            {
                return false;
            }
            if(power != _r.power)
            {
                return false;
            }
            if(timeStamp != _r.timeStamp)
            {
                if(timeStamp == null || _r.timeStamp == null || !timeStamp.equals(_r.timeStamp))
                {
                    return false;
                }
            }
            if(p != _r.p)
            {
                return false;
            }
            if(v != _r.v)
            {
                return false;
            }
            if(isMoving != _r.isMoving)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        __h = 5 * __h + java.lang.Float.floatToIntBits(pos);
        __h = 5 * __h + java.lang.Float.floatToIntBits(vel);
        __h = 5 * __h + java.lang.Float.floatToIntBits(power);
        if(timeStamp != null)
        {
            __h = 5 * __h + timeStamp.hashCode();
        }
        __h = 5 * __h + p;
        __h = 5 * __h + v;
        __h = 5 * __h + (isMoving ? 1 : 0);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeFloat(pos);
        __os.writeFloat(vel);
        __os.writeFloat(power);
        __os.writeString(timeStamp);
        __os.writeInt(p);
        __os.writeInt(v);
        __os.writeBool(isMoving);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        pos = __is.readFloat();
        vel = __is.readFloat();
        power = __is.readFloat();
        timeStamp = __is.readString();
        p = __is.readInt();
        v = __is.readInt();
        isMoving = __is.readBool();
    }
}
