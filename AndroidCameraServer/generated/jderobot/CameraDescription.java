// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `CameraDescription.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package jderobot;

/**
 * Static description of a camera
 **/
public class CameraDescription extends Ice.ObjectImpl
{
    public CameraDescription()
    {
    }

    public CameraDescription(String name, String shortDescription, String streamingUri, float fdistx, float fdisty, float u0, float v0, float skew, float posx, float posy, float posz, float foax, float foay, float foaz, float roll)
    {
        this.name = name;
        this.shortDescription = shortDescription;
        this.streamingUri = streamingUri;
        this.fdistx = fdistx;
        this.fdisty = fdisty;
        this.u0 = u0;
        this.v0 = v0;
        this.skew = skew;
        this.posx = posx;
        this.posy = posy;
        this.posz = posz;
        this.foax = foax;
        this.foay = foay;
        this.foaz = foaz;
        this.roll = roll;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object
        create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new CameraDescription();
        }

        public void
        destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::jderobot::CameraDescription"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.writeString(name);
        __os.writeString(shortDescription);
        __os.writeString(streamingUri);
        __os.writeFloat(fdistx);
        __os.writeFloat(fdisty);
        __os.writeFloat(u0);
        __os.writeFloat(v0);
        __os.writeFloat(skew);
        __os.writeFloat(posx);
        __os.writeFloat(posy);
        __os.writeFloat(posz);
        __os.writeFloat(foax);
        __os.writeFloat(foay);
        __os.writeFloat(foaz);
        __os.writeFloat(roll);
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        name = __is.readString();
        shortDescription = __is.readString();
        streamingUri = __is.readString();
        fdistx = __is.readFloat();
        fdisty = __is.readFloat();
        u0 = __is.readFloat();
        v0 = __is.readFloat();
        skew = __is.readFloat();
        posx = __is.readFloat();
        posy = __is.readFloat();
        posz = __is.readFloat();
        foax = __is.readFloat();
        foay = __is.readFloat();
        foaz = __is.readFloat();
        roll = __is.readFloat();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type jderobot::CameraDescription was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type jderobot::CameraDescription was not generated with stream support";
        throw ex;
    }

    public String name;

    public String shortDescription;

    public String streamingUri;

    public float fdistx;

    public float fdisty;

    public float u0;

    public float v0;

    public float skew;

    public float posx;

    public float posy;

    public float posz;

    public float foax;

    public float foay;

    public float foaz;

    public float roll;
}
